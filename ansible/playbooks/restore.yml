---
- name: 2 - Restore
  hosts: localhost
  connection: local
  become: true
  gather_facts: false

  vars:
    v_backup_params:
      - secrets
      - backup_name
      - storage_file
      - configuration_file
    v_keys:
      - encryption_key_pw
      - opsystem_pw
      - keystore_pw
      - op_user_pwd

  tasks:

    - name: Set global variables
      ansible.builtin.include_vars: "../global-vars.yaml"

    - name: Set variables from config file
      ansible.builtin.set_fact:
        target_user: "{{ upgrade.target_user }}"
        work_dir: "{{ upgrade.work_dir }}"
        ocp_url: "{{ target.ocp_url }}"
        ocp_user: "{{ target.ocp_user }}"
        ocp_pwd: "{{ target.ocp_pwd }}"
        ocp_project: "{{ target.ocp_project }}"
        operators_project: "{{ target.operators_project }}"
        openpage_name: "{{ target.openpage_name }}"

    - name: Set user name
      ansible.builtin.set_fact:
        target_user: "{{ upgrade.target_user }}"

    - name: Set working directory
      ansible.builtin.set_fact:
        work_dir: "{{ upgrade.work_dir }}"

    - name: Load global_config from yaml files in {{ work_dir }}
      ansible.builtin.include_vars:
        dir: "{{ work_dir }}"
        files_matching: '.*\.yaml$'
        depth: 1

    - name: Set backup variables from backup file
      ansible.builtin.set_fact:
        "{{item}}": "{{ hostvars[inventory_hostname]['backup_params'][item] }}"
      loop: "{{ v_backup_params }}"

    - name: Set keys variables from backup file
      ansible.builtin.set_fact:
        "{{item}}": "{{ hostvars[inventory_hostname]['keys'][item] }}"
      loop: "{{ v_keys }}"

    - name: Login to OCP
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          source ~/.zshrc
          oc login -u {{ ocp_user }} -p {{ ocp_pwd }} --server={{ ocp_url }}

    - name: Set project
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc project {{ ocp_project }}

    - name: Debug set project
      ansible.builtin.debug:
        var: run_shell_result
      tags: debug_info

    - name: Get Instance Id
      ansible.builtin.include_role:
        name: get_instance_id
      vars:
        get_instance_id_openpage_name: "{{ openpage_name }}"

    - name: Copy secrets to DB pod
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc cp {{ item }}.sec c-db2oltp-{{ instance_id }}-db2u-0:/mnt/backup/online
      loop: "{{ secrets }}"

    - name: Import secrets
      ansible.builtin.include_role:
        name: oc_exec
      vars:
        oc_exec_pod_command: |
          source ~/.bashrc
          cd /mnt/backup/online/
          gsk8capicmd_64 -secretkey -add -db /mnt/blumeta0/db2/keystore/keystore.p12 -stashed -label {{ item }} -format pkcs12 -file {{ item }}.sec
        oc_exec_pod: "c-db2oltp-{{ instance_id }}-db2u-0"
      loop: "{{ secrets }}"

    - name: Restart Application Pod
      ansible.builtin.debug:
        msg: ""

    - name: Scale Application to 0
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc scale --replicas=0 sts/openpages-{{ openpage_name }}-sts

    - name: Wait for Application to scale
      ansible.builtin.include_role:
        name: wait_shell
      vars:
        wait_shell_command: |
          oc get sts/openpages-{{ openpage_name }}-sts | grep 0/0 | wc -l

    - name: Scale Application to 1
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc scale --replicas=1 sts/openpages-{{ openpage_name }}-sts

    - name: Wait for Application to scale
      ansible.builtin.include_role:
        name: wait_shell
      vars:
        wait_shell_command: |
          oc get sts/openpages-{{ openpage_name }}-sts | grep 1/1 | wc -l

    - name: Copy Storage to App pod
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc cp {{ storage_file }} openpages-{{ openpage_name }}-sts-0:/openpages-shared/openpages-backup-restore/{{ storage_file }}

    - name: Import Storage Backup
      ansible.builtin.include_role:
        name: oc_exec
      vars:
        oc_exec_pod_command: |
          storage_file={{ storage_file }}
          cd /openpages-shared/openpages-backup-restore
          export OPDB_PASSWORD="$(cat "${SECRETS_PATH}/op-db-secret/openpage-pw")"
          cd /opt/ibm/OpenPages/aurora/bin
          name=$(basename ${storage_file} .zip)
          ./OPRestore.sh $name
          cd /openpages-shared/openpages-backup-restore/
          rm ${storage_file}
        oc_exec_pod: "openpages-{{ openpage_name }}-sts-0"

    - name: Copy Configuration to App pod
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc cp {{ configuration_file }} openpages-{{ openpage_name }}-sts-0:/openpages-shared/openpages-backup-restore/{{ configuration_file }}

    - name: Restart Application Pod
      ansible.builtin.debug:
        msg: ""

    - name: Scale Application to 0
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc scale --replicas=0 sts/openpages-{{ openpage_name }}-sts

    - name: Wait for Application to scale
      ansible.builtin.include_role:
        name: wait_shell
      vars:
        wait_shell_command: |
          oc get sts/openpages-{{ openpage_name }}-sts | grep 0/0 | wc -l

    - name: Scale Application to 1
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc scale --replicas=1 sts/openpages-{{ openpage_name }}-sts

    - name: Wait for Application to scale
      ansible.builtin.include_role:
        name: wait_shell
      vars:
        wait_shell_command: |
          oc get pods | grep openpages-openpagesinstance-cr-sts | grep 1/2 | wc -l
      # the pod is not fully restarting, it will be fine at the end

    - name: Pause for 5 minutes to build app
      ansible.builtin.pause:
        minutes: 5

    - name: Stop Application Pod before DB Restore
      ansible.builtin.debug:
        msg: ""

    - name: Scale Application to 0
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc scale --replicas=0 sts/openpages-{{ openpage_name }}-sts

    - name: Wait for Application to scale
      ansible.builtin.include_role:
        name: wait_shell
      vars:
        wait_shell_command: |
            oc get sts/openpages-{{ openpage_name }}-sts | grep 0/0 | wc -l

    - name: Copy DB Backup to DB pod, once again it can take some time
      ansible.builtin.include_role:
        name: run_shell
      vars:
        run_shell_command: |
          oc cp {{ backup_name }}  c-db2oltp-{{ instance_id }}-db2u-0:/mnt/backup/online/ --retries=-1

    - name: Restore Database OPX in pod
      ansible.builtin.include_role:
        name: oc_exec
      vars:
        oc_exec_pod_command: |
          backup_name={{ backup_name }}
          timestamp=${backup_name:25:14}
          echo "timestamp = $timestamp"
          source ~/.bashrc
          db2 connect to ${DBNAME}
          db2 force application all
          db2 deactivate DATABASE ${DBNAME}
          db2 connect reset
          db2 deactivate DATABASE ${DBNAME}
          BACKUPDIR="/mnt/backup/online/"
          cd $BACKUPDIR
          db2ckbkp -h ./${backup_name}
          db2 RESTORE DATABASE ${DBNAME} FROM /mnt/backup/online/ TAKEN AT ${timestamp} INTO ${DBNAME} LOGTARGET /mnt/backup/online/extracted_logs REPLACE EXISTING WITHOUT PROMPTING
          db2 "rollforward db OPX to end of backup on all dbpartitionnums and stop overflow log path (/mnt/backup/online/extracted_logs/)"
          db2 activate db ${DBNAME}
          db2 connect to ${DBNAME}
        oc_exec_pod: "c-db2oltp-{{ instance_id }}-db2u-0"

    - name: Backup result
      ansible.builtin.debug:
        var: oc_exec_result.stdout_lines
      tags: debug_info

    - name: Check DB version
      ansible.builtin.include_role:
        name: oc_exec
      vars:
        oc_exec_pod_command: |
          source ~/.bashrc
          db2 connect to ${DBNAME}
          db2 -x "select VERSION from openpage.schemaversion"
        oc_exec_pod: "c-db2oltp-{{ instance_id }}-db2u-0"

    - name: Check result
      ansible.builtin.debug:
        var: oc_exec_result.stdout
      tags: debug_info

    - name: Check result
      ansible.builtin.debug:
        msg: "test: {{ oc_exec_result.stdout is search('OpenPages 9.0.0.3.2 Build 1 2024/08/22') }}"
      tags: debug_info
      failed_when: oc_exec_result.stdout is not search("OpenPages 9.0.0.3.2 Build 1 2024/08/22")
