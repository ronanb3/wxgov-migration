---
- name: 3 - Migration
  hosts: localhost
  connection: local
  become: True
  gather_facts: False

  tasks:

  - name: Set global variables
    include_vars: "../global-vars.yaml"

  - name: set variables
    set_fact:
      target_user: "{{ upgrade.target_user }}"
      work_dir: "{{ upgrade.work_dir }}"
      ocp_url: "{{ source_ocp.ocp_url }}"
      ocp_user: "{{ source_ocp.ocp_user }}"
      ocp_pwd: "{{ source_ocp.ocp_pwd }}"
      ocp_project: "{{ source_ocp.ocp_project }}"
      operators_project: "{{ source_ocp.operators_project }}"
      instance_id: "{{ source_instance_id.instance_id }}"
      openpage_name: "{{ source_instance_id.openpage_name }}"

  - name: Set user name
    set_fact:
      target_user: "{{ upgrade.target_user }}"
    
  - name: Set working directory
    set_fact:
      work_dir: "{{ upgrade.work_dir }}"

  - name: create working directory with owner
    ansible.builtin.file:
      path: "{{ work_dir }}"
      state: directory
      mode: 755
      owner: "{{ target_user }}"
      group: "{{ target_user }}"
    
  # - name: Load global_config from yaml files in {{ work_dir }}
  #   include_vars:
  #     dir: "{{ work_dir }}"
  #     files_matching: '.*\.yaml$'
  #     depth: 1

  # - name: Display all variables/facts known for a host
  #   debug:
  #     var: hostvars[inventory_hostname]
  #   tags: debug_info

  - name: Test display
    debug:
      var: work_dir
    tags: debug_info

  - name: Login to OCP
    include_role:
      name: run_shell
    vars:
      command: |
        source ~/.zshrc
        oc login -u {{ ocp_user }} -p {{ ocp_pwd }} --server={{ ocp_url }}

  # - name: Debug Login
  #   debug:
  #     var: run_shell_result
  #   tags: debug_info

  - name: Set project
    include_role:
      name: run_shell
    vars:
      command: |
        oc project {{ ocp_project }}
  
  # - name: Debug set project
  #   debug:
  #     var: run_shell_result
  #   tags: debug_info

  - name: Get Secrets names
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        source ~/.bashrc
        gsk8capicmd_64 -cert -list -db /mnt/blumeta0/db2/keystore/keystore.p12 -stashed' 2> /dev/null | awk '/DB2/ {print $2}
      pod: "c-db2oltp-{{instance_id}}-db2u-0"

  - name: Set secret variable
    set_fact:
      secrets: "{{ oc_exec_result.stdout_lines }}" 

  - name: Debug secret variable
    debug:
      var: secrets
    tags: debug_info

  - name: remove all *.sec files
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        source ~/.bashrc
        cd
        rm *.sec
      pod: "c-db2oltp-{{instance_id}}-db2u-0"
    
  - name: extract secrets
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        source ~/.bashrc
        cd
        gsk8capicmd_64 -secretkey -extract -db /mnt/blumeta0/db2/keystore/keystore.p12 -stashed -target {{item}}.sec -format pkcs12 -label {{item}}
      pod : "c-db2oltp-{{instance_id}}-db2u-0"
    loop: "{{ secrets }}"

  - name: Copy secrets locally
    include_role:
      name: run_shell
    vars:
      command: |
        oc cp c-db2oltp-{{instance_id}}-db2u-0:/mnt/blumeta0/home/db2inst1/{{item}}.sec {{item}}.sec
    loop: "{{ secrets }}"

  - name: Backup Database OPX in pod
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        source ~/.bashrc
        db2 connect to ${DBNAME}
        BACKUPDIR="/mnt/backup/online/"
        cp ${KEYSTORELOC}/keystore.p12 $BACKUPDIR
        cp ${KEYSTORELOC}/keystore.sth $BACKUPDIR
        cd $BACKUPDIR
        # remove all previous backups
        rm OPX*
        db2 backup db ${DBNAME} on all dbpartitionnums online to $BACKUPDIR include logs without prompting
      pod: "c-db2oltp-{{instance_id}}-db2u-0"

  - name: Get latest backup file name
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        source ~/.bashrc
        cd /mnt/backup/online/
        ls -lt OPX* | head -n 1 | awk "{print \$9}"
      pod: "c-db2oltp-{{instance_id}}-db2u-0"
  
  - name: Set backup variable
    set_fact:
      backup_name: "{{ oc_exec_result.stdout }}"

  - name: Debug backup variable
    debug:
      var: backup_name
    tags: debug_info

  - name: Copy keys locally
    include_role:
      name: run_shell
    vars:
      command: |
        oc rsync c-db2oltp-{{instance_id}}-db2u-0:/mnt/backup/online//keystore.p12 . --progress=true
        oc rsync c-db2oltp-{{instance_id}}-db2u-0:/mnt/backup/online//keystore.sth . --progress=true

  - name: Copy DB backup locally - It can take a while, many hours !
    include_role:
      name: run_shell
    vars:
      command: |
        oc rsync c-db2oltp-{{instance_id}}-db2u-0:/mnt/backup/online/{{backup_name}} . --progress=true

  - name : Scale Application to 1
    include_role:
      name: run_shell
    vars:
      command: |
        oc scale --replicas=1 sts/openpages-{{ openpage_name }}-sts
  
  - name: Wait for Application to scale
    include_role:
      name: wait_shell
    vars:
      command: |
        oc get sts/openpages-{{ openpage_name }}-sts | grep 1/1 | wc -l

  - name: Backup Application Storage
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        mkdir -p /openpages-shared/temp
        cd /opt/ibm/OpenPages/aurora/bin
        ./OPBackup.sh /openpages-shared/temp nosrvrst
        ls -alt /openpages-shared/temp
      pod: "openpages-{{openpage_name}}-sts-0"

  - name: Get storage name
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        cd /openpages-shared/temp
        ls -lt *.zip | head -n 1 | awk "{print \$9}"
      pod: "openpages-{{openpage_name}}-sts-0"

  - name: Set storage variable
    set_fact:
      storage_file: "{{ oc_exec_result.stdout }}"

  - name: Debug storage variable
    debug:
      var: storage_file
    tags: debug_info

  - name: Copy {{storage_file}} from the pod locally
    include_role:
      name: run_shell
    vars:
      command: |
        oc rsync openpages-{{openpage_name}}-sts-0:/openpages-shared/temp/{{storage_file}} . --progress=true

  - name: Backup Application Configuration
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        cd /opt/ibm/OpenPages/aurora/bin
        ./OPBackup.sh /openpages-shared/openpages-backup-restore app-cp4d nosrvrst
        ls -alt /openpages-shared/openpages-backup-restore
      pod: "openpages-{{openpage_name}}-sts-0"

  - name: Get configuration name
    include_role:
      name: oc_exec
    vars:
      pod_command: |
        cd /openpages-shared/openpages-backup-restore
        ls -lt *.zip | head -n 1 | awk "{print \$9}"
      pod: "openpages-{{openpage_name}}-sts-0"

  - name: Set configuration variable
    set_fact:
      configuration_file: "{{ oc_exec_result.stdout }}"

  - name: Debug configuration variable
    debug:
      var: configuration_file
    tags: debug_info

  - name: Copy {{configuration_file}} from the pod locally
    include_role:
      name: run_shell
    vars:
      command: |
        oc rsync openpages-{{openpage_name}}-sts-0:/openpages-shared/openpages-backup-restore/{{configuration_file}} . --progress=true

  - name: Get encryption_key_pw
    include_role:
      name: run_shell
    vars:
      command: |
        oc get secret openpages-{{openpage_name}}-platform-secret -o jsonpath="{.data.encryption-key-pw}"
  
  - name: Set encryption_key_pw variable
    set_fact:
      encryption_key_pw: "{{ run_shell_result.stdout }}"

  - name: Debug configuration variable
    debug:
      var: encryption_key_pw
    tags: debug_info

  - name: Get opsystem_pw
    include_role:
      name: run_shell
    vars:
      command: |
        oc get secret openpages-{{openpage_name}}-platform-secret -o jsonpath="{.data.opsystem-pw}"
  
  - name: Set opsystem_pw variable
    set_fact:
      opsystem_pw: "{{ run_shell_result.stdout }}"

  - name: Debug configuration variable
    debug:
      var: opsystem_pw
    tags: debug_info

  - name: Get keystore_pw
    include_role:
      name: run_shell
    vars:
      command: |
        oc get secret openpages-{{openpage_name}}-platform-secret -o jsonpath="{.data.keystore-pw}"
  
  - name: Set keystore_pw variable
    set_fact:
      keystore_pw: "{{ run_shell_result.stdout }}"

  - name: Debug configuration variable
    debug:
      var: keystore_pw
    tags: debug_info

  - name: Get op_user_pwd
    include_role:
      name: run_shell
    vars:
      command: |
        oc get secret openpages-{{openpage_name}}-initialpw-secret -o jsonpath="{.data.OpenPagesAdministrator}"
  
  - name: Set op_user_pwd variable
    set_fact:
      op_user_pwd: "{{ run_shell_result.stdout }}"

  - name: Debug configuration variable
    debug:
      var: op_user_pwd
    tags: debug_info

  - name: Create backup param file
    template:
       src: backup_vars.j2
       dest: "{{ work_dir }}/backup_vars.yaml"
       mode: 0755

  - name: Print next steps
    debug:
      msg:
        - "==== Backup Done ===="
        - "Transfer the {{ work_dir }} to the target bastion server"
        - "Run the restore.yaml playbook"
    tags: debug_info